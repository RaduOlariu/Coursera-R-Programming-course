x<-0:6
as.numeric(x)
as.character(x)
as.logical(x)
m<-matrix(nrow = 3, ncol = 3)
m
dim(m)
attributes(m)
n<-matrix(1:8, nrow = 3, ncol = 3)
n<-matrix(1:9, nrow = 3, ncol = 3)
n
m<-1:10
dim(m)<-c(3,3)
dim(m)<-c(5,2)
m
dim(m)<-c(2,5)
m
y<-2:7
cbind(x,y)
y<-:7
y<-1:7
cbind(x,y)
rbind(x,y)
o<-rbind(y,x)
0
o
cbind(x,y)
rbind(x,y)
f<-factor(c("male", "female", "male", "female", "female"))
f
unclass(f)
f(1)
f.1
f{1}
f[1]
f[1:3]
read.csv(cryo test.csv)
cryo_test <- read.csv(cryo test.csv)
library(readr)
cryo_test <- read.csv(cryo test.csv)
cryo_test <- read_csv(cryo test.csv)
cryo_test <- read_csv("cryo test.csv")
cryo_test <- read_csv("cryo test.csv")
row.names(cryo_test)
cryo_test <- read_csv("cryo test.csv")
names(cryo_test)
names(cryo_test)
cryo_test[1,1]
read.csv("patient_names.csv")
patient_names <- read.csv("patient_names.csv")
names(patient_names)
rm(patient_names)
read.csv("patient_names.csv")
row.names(cryo_test)
cryo_test <- read_csv("cryo test.csv", row.names = 1)
library(readr)
cryo_test <- read_csv("cryo test.csv", row.names = 1)
cryo_test <- read_csv("cryo test.csv", row.names = 0)
read.csv("patient_names.csv")
cryo_test <- read_csv("cryo test.csv")
row.names(cryo_test)
cryo_test
cryo_test <- read_csv("cryo test.csv")
cryo_test <- read_csv("cryo test.csv")
row.names(cryo_test)
cryo_test[,1]
row.names(cryo_test) <- cryo_test[,1]
row.names(cryo_test) <- cryo_test[2-12]
row.names(cryo_test) <- cryo_test[,1] 2:12
row.names(cryo_test) <- cryo_test[,1] [2:12]
row.names(cryo_test) <- cryo_test[2-12,1]
row.names(cryo_test) <- cryo_test[2-13,1]
cryo_test[2:13,1]
cryo_test[1:12,1]
row.names(cryo_test) <- cryo_test[1:12,1]
cryo_test[,1]
cryo_test[2:12,2:9]
results <- data.frame(cryo_test[2:12,2:9], row.names = cryo_test[,1])
results <- data.frame(cryo_test[1:12,2:9], row.names = cryo_test[,1])
results
results[1,]
results[[1,1]]
results$Pigmentation_preop
cryo_test$Pigmentation_preop
library(ggpubr)
ggpaired(cryo_test, cryo_test$Pigmentation_preop, cryo_test$Pigmentation_postop)
ggpaired(cryo_test, "Pigmentation_preop", "Pigmentation_postop")
ggpaired(cryo_test, "Pigmentation_preop", "Pigmentation_postop", palette = "npg")
ggpaired(cryo_test, "Pigmentation_preop", "Pigmentation_postop", palette = "npg")
ggpaired(cryo_test, "Pigmentation_preop", "Pigmentation_postop", palette = "npg", width = 0.2)
ggpaired(cryo_test, "Pigmentation_preop", "Pigmentation_postop", fill= "condition", palette = "npg", width = 0.2)
ggpaired(cryo_test, "Pigmentation_preop", "Pigmentation_postop", color = "condition", fill= "condition", palette = "npg", width = 0.2)
ggpaired(cryo_test, "Pigmentation_preop", "Pigmentation_postop", color = "condition", fill= "condition", palette = "jco", width = 0.2)
library(readr)
cryo_test <- read_csv("cryo test.csv")
library(ggpubr)
ggpaired(cryo_test, "Pigmentation_preop", "Pigmentation_postop", color = "condition", fill= "condition", palette = "jco", width = 0.2)
View(cryo_test)
cryo_test
library(ggpubr)
ggpaired(cryo_test, "Total_Observer_Score_preop", "Total_Observer_Score_postop", color = "condition", fill= "condition", palette = "jco", width = 0.2)
x<-cryo_test$Total_Observer_Score_preop
y<-cryo_test$Total_Observer_Score_postop
wilcox.test(x,y,paired = FALSE)
wilcox.test(x,y,paired = FALSE, conf.int = TRUE)
t.test(x,y, paired = TRUE)
ttest(cryo_test$Pigmentation_preop,cryo_test$Pigmentation_postop, paired = TRUE)
t.test(cryo_test$Pigmentation_preop,cryo_test$Pigmentation_postop, paired = TRUE)
wilcox.test(cryo_test$Pigmentation_preop,cryo_test$Pigmentation_postop, paired = TRUE)
stat.test <-t.test(cryo_test$Pigmentation_preop,cryo_test$Pigmentation_postop, paired = TRUE) %>%
add_significance()
library(rstatix)
stat.test <-t.test(cryo_test$Pigmentation_preop,cryo_test$Pigmentation_postop, paired = TRUE) %>%
add_significance()
View(stat.test)
bxp <- ggpaired(cryo_test, "Pigmentation_preop", "Pigmentation_postop", color = "condition", fill= "condition", palette = "jco", width = 0.2)
View(bxp)
stat.test <- stat.test %>% add_xy_position(x = "Condition")
bxp +
stat_pvalue_manual(stat.test, tip.length = 0) +
labs(subtitle = get_test_label(stat.test, detailed= TRUE))
stat.test <- stat.test %>% add_xy_position(x = "Condition")
bxp +
stat_pvalue_manual(stat.test, tip.length = 0) +
labs(subtitle = get_test_label(stat.test, detailed= TRUE))
bxp +
stat_pvalue_manual(stat.test, tip.length = 0) +
labs(subtitle = get_test_label(stat.test, detailed= TRUE))
View(stat.test)
bxp + stat_pvalue_manual(stat.test)
bxp + stat_pvalue_manual(stat.test, label = "bxp.adj")
View(stat.test)
stat.test <-t.test(cryo_test$Pigmentation_preop,cryo_test$Pigmentation_postop, paired = TRUE)
View(stat.test)
bxp
bxp + stat_pvalue_manual(stat.test, label = "bxp.adj")
t.test(cryo_test$Pigmentation_preop,cryo_test$Pigmentation_postop, paired = TRUE)
# T-test
stat.test <- compare_means(
len ~ dose, data = ToothGrowth,
method = "t.test"
)
stat.test
View(stat.test)
# T-test
stat.test <- compare_means(
"Pigmentation_preop" ~ "Pigmentation_postop", data = cryo_test,
method = "t.test"
)
stat.test
# T-test
stat.test <- compare_means(
Pigmentation_preop ~ Pigmentation_postop, data = cryo_test,
method = "t.test")
rm(stat.test)
rm(bxp)
boxplot(cryo_test$OBS_Thickness_preop)
boxplot(cryo_test$OBS_Thickness_preop, range = 0)
boxplot(cryo_test$OBS_Thickness_preop, cryo_test$OBS_Thickness_postop,range = 0)
shapiro.test(cryo_test$OBS_Thickness_preop)
shapiro.test(cryo_test$Total_Observer_Score_preop)
shapiro.test(rnorm(100, mean = 5, sd = 3))
shapiro.test(runif(100, min = 2, max = 4))
runif(100, min = 2, max = 4)
itching_diff <- cryo_test$OBS_Thickness_preop - cryo_test$OBS_Thickness_postop
mean(itching_diff)
sd(itching_diff)
obs_thickness_diff <- itching_diff
rm(itching_diff)
mean(obs_thickness_diff)
pliability_diff <- cryo_test$Pliability_preop - cryo_test$Pliability_postop
mean(pliability_diff)
sd(pliability_diff)
desc_statby(cryo_test,cryo_test$Pliability_preop)
library(ggpubr)
desc_statby(cryo_test,cryo_test$Pliability_preop)
ToothGrowth
res <- desc_statby(ToothGrowth, measure.var = "len",
grps = c("dose", "supp"))
head(res[, 1:10])
res
desc_statby(cryo_test,cryo_test$Pliability_preop, grps = "NULL")
swirl()
